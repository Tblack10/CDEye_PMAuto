package CDEye_PMAuto.backend.tsrow;import CDEye_PMAuto.backend.project.Project;import CDEye_PMAuto.backend.timesheet.Timesheet;import CDEye_PMAuto.backend.workpackage.WorkPackage;import javax.ejb.Stateless;import javax.enterprise.context.Dependent;import javax.persistence.EntityManager;import javax.persistence.PersistenceContext;import javax.persistence.TypedQuery;import java.io.Serializable;import java.util.List;@Dependent@Statelesspublic class TimesheetRowManager implements Serializable {    @PersistenceContext(unitName="inventory-jpa")    EntityManager em;    public TimesheetRow[] getAll() {        TypedQuery<TimesheetRow> query = em.createQuery("select tsr from TimesheetRow tsr",                TimesheetRow.class);        return getRows(query);    }    private TimesheetRow[] getRows(TypedQuery<TimesheetRow> query) {        List<TimesheetRow> rows = query.getResultList();        TimesheetRow[] rowArr = new TimesheetRow[rows.size()];        for (int i = 0; i < rowArr.length; i++) {            rowArr[i] = rows.get(i);        }        return rowArr;    }    public TimesheetRow[] getRowsForTimesheet(Timesheet timesheet) {        TypedQuery<TimesheetRow> query = em.createQuery("SELECT tsr FROM TimesheetRow tsr WHERE tsr.timesheet.id = :timesheetId", TimesheetRow.class)                .setParameter("timesheetId", timesheet.getId());        return getRows(query);    }        public TimesheetRow[] getRowsForWorkPackage(WorkPackage wp) {        TypedQuery<TimesheetRow> query = em.createQuery("SELECT tsr FROM TimesheetRow tsr WHERE tsr.workPackage.id = :wpId", TimesheetRow.class)                .setParameter("wpId", wp.getId());        return getRows(query);    }        public TimesheetRow[] getRowsForProject(Project p) {        TypedQuery<TimesheetRow> query = em.createQuery(                "SELECT row FROM TimesheetRow row WHERE row.project.id = :projectId", TimesheetRow.class)                .setParameter("projectId", p.getId());        return getRows(query);    }        public void deleteRowsForWP(WorkPackage wp) {        TimesheetRow[] rowsToDelete = getRowsForWorkPackage(wp);        for (TimesheetRow row : rowsToDelete) {            deleteRow(row);        }    }    public void updateRow(TimesheetRow r) {em.merge(r);}        public void deleteRow(TimesheetRow r) {        em.remove(em.contains(r) ? r : em.merge(r));    }        public void addRow(TimesheetRow r) {        em.persist(r);        System.out.println("Row added");    }}